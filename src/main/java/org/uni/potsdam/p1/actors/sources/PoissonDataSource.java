package org.uni.potsdam.p1.actors.sources;

import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.util.Collector;
import org.uni.potsdam.p1.types.Measurement;

/**
 * This class is used to enrich streams of events generated by the {@link Source}s. It will
 * generate a random number of new events for every {@link Measurement} it receives. The
 * amount of new events generated is determined by a Poisson distribution around a given
 * mean value.
 */
public class PoissonDataSource implements FlatMapFunction<Measurement, Measurement> {

  double poissonMean;

  /**
   * Constructs a new PoissonDataSource for a given mean.
   *
   * @param poissonMean The average amount of events to be produced.
   */
  public PoissonDataSource(double poissonMean) {
    this.poissonMean = poissonMean;
  }

  /**
   * Maps source events to a stream of new events.
   *
   * @param measurement The input value.
   * @param collector   The collector for returning result values.
   * @throws Exception Flink's exceptions.
   */
  @Override
  public void flatMap(Measurement measurement, Collector<Measurement> collector) throws Exception {
    PoissonDistribution prob = new PoissonDistribution(poissonMean);

    int amount = prob.sample();

    for (int i = 0; i < amount; i++) {
      collector.collect(new Measurement());
    }
  }
}
