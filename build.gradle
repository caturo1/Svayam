plugins {
  id 'java'
  id 'application'
  // shadow plugin to produce fat JARs
  id 'com.github.johnrengelman.shadow' version '7.1.2'
}

ext {
  javaVersion = '11'
  flinkVersion = '1.20.0'
  scalaBinaryVersion = '2.12'
  slf4jVersion = '1.7.36'
  log4jVersion = '2.17.1'
  flinkVersionNew = flinkVersion.toString().replace("-SNAPSHOT", "") >= ""
}

// artifact properties
group = 'org.uni.potsdam.p1'
version = '0.1-SNAPSHOT'
if (flinkVersionNew) {
  mainClassName = 'org.uni.potsdam.p1.DataStreamJob'
} else {
  mainClassName = 'org.uni.potsdam.p1.StreamingJob'
}
description = """Flink Quickstart Job"""

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties"]

// declare where to find the dependencies of your project
repositories {
  mavenCentral()
  maven {
    url "https://repository.apache.org/content/repositories/snapshots"
    mavenContent {
      snapshotsOnly()
    }
  }
}

// NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
// in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
// -> Explicitly define the // libraries we want to be included in the "flinkShadowJar" configuration!
configurations {
  flinkShadowJar // dependencies which go into the shadowJar

  // always exclude these (also from transitive dependencies) since they are provided by Flink
  flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
  flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
  flinkShadowJar.exclude group: 'org.slf4j'
  flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}

// declare the dependencies for your production and test code
dependencies {
  // --------------------------------------------------------------
  // Compile-time dependencies that should NOT be part of the
  // shadow jar and are provided in the lib folder of Flink
  // --------------------------------------------------------------
  if (flinkVersionNew) {
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
  } else {
    implementation """org.apache.flink:flink-streaming-java_${scalaBinaryVersion}:
${flinkVersion}"""
    implementation "org.apache." +
      "flink:flink-clients_${scalaBinaryVersion}:${flinkVersion}"
  }

  // --------------------------------------------------------------
  // Dependencies that should be part of the shadow jar, e.g.
  // connectors. These must be in the flinkShadowJar configuration!
  // --------------------------------------------------------------

  implementation "org.apache.flink:flink-connector-kafka:3.2.0-1.19"

  flinkShadowJar "org.apache.kafka:kafka-clients:3.8.0"
  flinkShadowJar "org.slf4j:slf4j-api:1.7.32"
  flinkShadowJar "org.slf4j:slf4j-simple:1.7.32"
  flinkShadowJar "org.apache.flink:flink-connector-kafka:3.2.0-1.19"
  flinkShadowJar "com.google.ortools:ortools-java:9.11.4210"
  flinkShadowJar "org.apache.commons:commons-math3:3.6.1"
  runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
  runtimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
  runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"

  // Add test dependencies here.
  testImplementation(platform "org.junit:junit-bom:5.10.3")
  testImplementation "org.junit.jupiter:junit-jupiter"
  testImplementation "junit:junit:4.13.2"
  testImplementation "org.assertj:assertj-core:3.26.3"
}

// make compileOnly dependencies available for tests:
sourceSets {
  main.compileClasspath += configurations.flinkShadowJar
  main.runtimeClasspath += configurations.flinkShadowJar

  test.compileClasspath += configurations.flinkShadowJar
  test.runtimeClasspath += configurations.flinkShadowJar

  javadoc.classpath += configurations.flinkShadowJar
}

run.classpath = sourceSets.main.runtimeClasspath

jar {
  manifest {
    attributes 'Built-By': System.getProperty('user.name'),
      'Build-Jdk': System.getProperty('java.version')
  }
}

shadowJar {
  configurations = [project.configurations.flinkShadowJar]
}
